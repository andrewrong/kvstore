// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto

#include "server.pb.h"
#include "server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace proto {

static const char* KvStore_method_names[] = {
  "/proto.KvStore/Get",
  "/proto.KvStore/Scan",
  "/proto.KvStore/Put",
  "/proto.KvStore/Del",
};

std::unique_ptr< KvStore::Stub> KvStore::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KvStore::Stub> stub(new KvStore::Stub(channel));
  return stub;
}

KvStore::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Get_(KvStore_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Scan_(KvStore_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Put_(KvStore_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Del_(KvStore_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KvStore::Stub::Get(::grpc::ClientContext* context, const ::proto::Key& request, ::proto::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void KvStore::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::proto::Key* request, ::proto::GetResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::GetResponse>* KvStore::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::proto::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::GetResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::GetResponse>* KvStore::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::proto::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::GetResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::ClientReader< ::proto::KVPair>* KvStore::Stub::ScanRaw(::grpc::ClientContext* context, const ::proto::Key& request) {
  return ::grpc::internal::ClientReaderFactory< ::proto::KVPair>::Create(channel_.get(), rpcmethod_Scan_, context, request);
}

::grpc::ClientAsyncReader< ::proto::KVPair>* KvStore::Stub::AsyncScanRaw(::grpc::ClientContext* context, const ::proto::Key& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::proto::KVPair>::Create(channel_.get(), cq, rpcmethod_Scan_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::proto::KVPair>* KvStore::Stub::PrepareAsyncScanRaw(::grpc::ClientContext* context, const ::proto::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::proto::KVPair>::Create(channel_.get(), cq, rpcmethod_Scan_, context, request, false, nullptr);
}

::grpc::Status KvStore::Stub::Put(::grpc::ClientContext* context, const ::proto::KVPair& request, ::proto::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Put_, context, request, response);
}

void KvStore::Stub::experimental_async::Put(::grpc::ClientContext* context, const ::proto::KVPair* request, ::proto::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::BaseResponse>* KvStore::Stub::AsyncPutRaw(::grpc::ClientContext* context, const ::proto::KVPair& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::BaseResponse>::Create(channel_.get(), cq, rpcmethod_Put_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::BaseResponse>* KvStore::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::proto::KVPair& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::BaseResponse>::Create(channel_.get(), cq, rpcmethod_Put_, context, request, false);
}

::grpc::Status KvStore::Stub::Del(::grpc::ClientContext* context, const ::proto::Key& request, ::proto::BaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Del_, context, request, response);
}

void KvStore::Stub::experimental_async::Del(::grpc::ClientContext* context, const ::proto::Key* request, ::proto::BaseResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Del_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::BaseResponse>* KvStore::Stub::AsyncDelRaw(::grpc::ClientContext* context, const ::proto::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::BaseResponse>::Create(channel_.get(), cq, rpcmethod_Del_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::BaseResponse>* KvStore::Stub::PrepareAsyncDelRaw(::grpc::ClientContext* context, const ::proto::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::BaseResponse>::Create(channel_.get(), cq, rpcmethod_Del_, context, request, false);
}

KvStore::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KvStore_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KvStore::Service, ::proto::Key, ::proto::GetResponse>(
          std::mem_fn(&KvStore::Service::Get), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KvStore_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< KvStore::Service, ::proto::Key, ::proto::KVPair>(
          std::mem_fn(&KvStore::Service::Scan), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KvStore_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KvStore::Service, ::proto::KVPair, ::proto::BaseResponse>(
          std::mem_fn(&KvStore::Service::Put), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KvStore_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KvStore::Service, ::proto::Key, ::proto::BaseResponse>(
          std::mem_fn(&KvStore::Service::Del), this)));
}

KvStore::Service::~Service() {
}

::grpc::Status KvStore::Service::Get(::grpc::ServerContext* context, const ::proto::Key* request, ::proto::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KvStore::Service::Scan(::grpc::ServerContext* context, const ::proto::Key* request, ::grpc::ServerWriter< ::proto::KVPair>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KvStore::Service::Put(::grpc::ServerContext* context, const ::proto::KVPair* request, ::proto::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KvStore::Service::Del(::grpc::ServerContext* context, const ::proto::Key* request, ::proto::BaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto

