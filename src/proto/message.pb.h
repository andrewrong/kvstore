// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_INCLUDED_message_2eproto
#define PROTOBUF_INCLUDED_message_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto 

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_message_2eproto
namespace proto {
class BaseResponse;
class BaseResponseDefaultTypeInternal;
extern BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
class GetResponse;
class GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class KVPair;
class KVPairDefaultTypeInternal;
extern KVPairDefaultTypeInternal _KVPair_default_instance_;
class Key;
class KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::BaseResponse* Arena::CreateMaybeMessage<::proto::BaseResponse>(Arena*);
template<> ::proto::GetResponse* Arena::CreateMaybeMessage<::proto::GetResponse>(Arena*);
template<> ::proto::KVPair* Arena::CreateMaybeMessage<::proto::KVPair>(Arena*);
template<> ::proto::Key* Arena::CreateMaybeMessage<::proto::Key>(Arena*);
template<> ::proto::Value* Arena::CreateMaybeMessage<::proto::Value>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {

// ===================================================================

class Key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Key) */ {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Key(Key&& from) noexcept
    : Key() {
    *this = ::std::move(from);
  }

  inline Key& operator=(Key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Key* internal_default_instance() {
    return reinterpret_cast<const Key*>(
               &_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Key* other);
  friend void swap(Key& a, Key& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Key* New() const final {
    return CreateMaybeMessage<Key>(NULL);
  }

  Key* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Key>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:proto.Key)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Value* other);
  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return CreateMaybeMessage<Value>(NULL);
  }

  Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:proto.Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KVPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.KVPair) */ {
 public:
  KVPair();
  virtual ~KVPair();

  KVPair(const KVPair& from);

  inline KVPair& operator=(const KVPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KVPair(KVPair&& from) noexcept
    : KVPair() {
    *this = ::std::move(from);
  }

  inline KVPair& operator=(KVPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KVPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KVPair* internal_default_instance() {
    return reinterpret_cast<const KVPair*>(
               &_KVPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(KVPair* other);
  friend void swap(KVPair& a, KVPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KVPair* New() const final {
    return CreateMaybeMessage<KVPair>(NULL);
  }

  KVPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KVPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KVPair& from);
  void MergeFrom(const KVPair& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Key kkey = 1;
  bool has_kkey() const;
  void clear_kkey();
  static const int kKkeyFieldNumber = 1;
  private:
  const ::proto::Key& _internal_kkey() const;
  public:
  const ::proto::Key& kkey() const;
  ::proto::Key* release_kkey();
  ::proto::Key* mutable_kkey();
  void set_allocated_kkey(::proto::Key* kkey);

  // .proto.Value vvalue = 2;
  bool has_vvalue() const;
  void clear_vvalue();
  static const int kVvalueFieldNumber = 2;
  private:
  const ::proto::Value& _internal_vvalue() const;
  public:
  const ::proto::Value& vvalue() const;
  ::proto::Value* release_vvalue();
  ::proto::Value* mutable_vvalue();
  void set_allocated_vvalue(::proto::Value* vvalue);

  // @@protoc_insertion_point(class_scope:proto.KVPair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Key* kkey_;
  ::proto::Value* vvalue_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BaseResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BaseResponse) */ {
 public:
  BaseResponse();
  virtual ~BaseResponse();

  BaseResponse(const BaseResponse& from);

  inline BaseResponse& operator=(const BaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BaseResponse(BaseResponse&& from) noexcept
    : BaseResponse() {
    *this = ::std::move(from);
  }

  inline BaseResponse& operator=(BaseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseResponse* internal_default_instance() {
    return reinterpret_cast<const BaseResponse*>(
               &_BaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BaseResponse* other);
  friend void swap(BaseResponse& a, BaseResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseResponse* New() const final {
    return CreateMaybeMessage<BaseResponse>(NULL);
  }

  BaseResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BaseResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BaseResponse& from);
  void MergeFrom(const BaseResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.BaseResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetResponse) */ {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetResponse* other);
  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const final {
    return CreateMaybeMessage<GetResponse>(NULL);
  }

  GetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.BaseResponse status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  private:
  const ::proto::BaseResponse& _internal_status() const;
  public:
  const ::proto::BaseResponse& status() const;
  ::proto::BaseResponse* release_status();
  ::proto::BaseResponse* mutable_status();
  void set_allocated_status(::proto::BaseResponse* status);

  // .proto.Value value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::proto::Value& _internal_value() const;
  public:
  const ::proto::Value& value() const;
  ::proto::Value* release_value();
  ::proto::Value* mutable_value();
  void set_allocated_value(::proto::Value* value);

  // @@protoc_insertion_point(class_scope:proto.GetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::BaseResponse* status_;
  ::proto::Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Key

// string key = 1;
inline void Key::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Key::key() const {
  // @@protoc_insertion_point(field_get:proto.Key.key)
  return key_.GetNoArena();
}
inline void Key::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Key.key)
}
#if LANG_CXX11
inline void Key::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Key.key)
}
#endif
inline void Key::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Key.key)
}
inline void Key::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Key.key)
}
inline ::std::string* Key::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:proto.Key.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key::release_key() {
  // @@protoc_insertion_point(field_release:proto.Key.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.Key.key)
}

// -------------------------------------------------------------------

// Value

// string value = 1;
inline void Value::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Value::value() const {
  // @@protoc_insertion_point(field_get:proto.Value.value)
  return value_.GetNoArena();
}
inline void Value::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Value.value)
}
#if LANG_CXX11
inline void Value::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Value.value)
}
#endif
inline void Value::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Value.value)
}
inline void Value::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Value.value)
}
inline ::std::string* Value::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:proto.Value.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_value() {
  // @@protoc_insertion_point(field_release:proto.Value.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.Value.value)
}

// -------------------------------------------------------------------

// KVPair

// .proto.Key kkey = 1;
inline bool KVPair::has_kkey() const {
  return this != internal_default_instance() && kkey_ != NULL;
}
inline void KVPair::clear_kkey() {
  if (GetArenaNoVirtual() == NULL && kkey_ != NULL) {
    delete kkey_;
  }
  kkey_ = NULL;
}
inline const ::proto::Key& KVPair::_internal_kkey() const {
  return *kkey_;
}
inline const ::proto::Key& KVPair::kkey() const {
  const ::proto::Key* p = kkey_;
  // @@protoc_insertion_point(field_get:proto.KVPair.kkey)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Key*>(
      &::proto::_Key_default_instance_);
}
inline ::proto::Key* KVPair::release_kkey() {
  // @@protoc_insertion_point(field_release:proto.KVPair.kkey)
  
  ::proto::Key* temp = kkey_;
  kkey_ = NULL;
  return temp;
}
inline ::proto::Key* KVPair::mutable_kkey() {
  
  if (kkey_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Key>(GetArenaNoVirtual());
    kkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.KVPair.kkey)
  return kkey_;
}
inline void KVPair::set_allocated_kkey(::proto::Key* kkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete kkey_;
  }
  if (kkey) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kkey, submessage_arena);
    }
    
  } else {
    
  }
  kkey_ = kkey;
  // @@protoc_insertion_point(field_set_allocated:proto.KVPair.kkey)
}

// .proto.Value vvalue = 2;
inline bool KVPair::has_vvalue() const {
  return this != internal_default_instance() && vvalue_ != NULL;
}
inline void KVPair::clear_vvalue() {
  if (GetArenaNoVirtual() == NULL && vvalue_ != NULL) {
    delete vvalue_;
  }
  vvalue_ = NULL;
}
inline const ::proto::Value& KVPair::_internal_vvalue() const {
  return *vvalue_;
}
inline const ::proto::Value& KVPair::vvalue() const {
  const ::proto::Value* p = vvalue_;
  // @@protoc_insertion_point(field_get:proto.KVPair.vvalue)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Value*>(
      &::proto::_Value_default_instance_);
}
inline ::proto::Value* KVPair::release_vvalue() {
  // @@protoc_insertion_point(field_release:proto.KVPair.vvalue)
  
  ::proto::Value* temp = vvalue_;
  vvalue_ = NULL;
  return temp;
}
inline ::proto::Value* KVPair::mutable_vvalue() {
  
  if (vvalue_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Value>(GetArenaNoVirtual());
    vvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.KVPair.vvalue)
  return vvalue_;
}
inline void KVPair::set_allocated_vvalue(::proto::Value* vvalue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vvalue_;
  }
  if (vvalue) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vvalue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vvalue, submessage_arena);
    }
    
  } else {
    
  }
  vvalue_ = vvalue;
  // @@protoc_insertion_point(field_set_allocated:proto.KVPair.vvalue)
}

// -------------------------------------------------------------------

// BaseResponse

// int32 code = 1;
inline void BaseResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 BaseResponse::code() const {
  // @@protoc_insertion_point(field_get:proto.BaseResponse.code)
  return code_;
}
inline void BaseResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:proto.BaseResponse.code)
}

// string msg = 2;
inline void BaseResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseResponse::msg() const {
  // @@protoc_insertion_point(field_get:proto.BaseResponse.msg)
  return msg_.GetNoArena();
}
inline void BaseResponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.BaseResponse.msg)
}
#if LANG_CXX11
inline void BaseResponse::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.BaseResponse.msg)
}
#endif
inline void BaseResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.BaseResponse.msg)
}
inline void BaseResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.BaseResponse.msg)
}
inline ::std::string* BaseResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:proto.BaseResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseResponse::release_msg() {
  // @@protoc_insertion_point(field_release:proto.BaseResponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:proto.BaseResponse.msg)
}

// -------------------------------------------------------------------

// GetResponse

// .proto.BaseResponse status = 1;
inline bool GetResponse::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void GetResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::proto::BaseResponse& GetResponse::_internal_status() const {
  return *status_;
}
inline const ::proto::BaseResponse& GetResponse::status() const {
  const ::proto::BaseResponse* p = status_;
  // @@protoc_insertion_point(field_get:proto.GetResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BaseResponse*>(
      &::proto::_BaseResponse_default_instance_);
}
inline ::proto::BaseResponse* GetResponse::release_status() {
  // @@protoc_insertion_point(field_release:proto.GetResponse.status)
  
  ::proto::BaseResponse* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::proto::BaseResponse* GetResponse::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::BaseResponse>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetResponse.status)
  return status_;
}
inline void GetResponse::set_allocated_status(::proto::BaseResponse* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:proto.GetResponse.status)
}

// .proto.Value value = 2;
inline bool GetResponse::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void GetResponse::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::proto::Value& GetResponse::_internal_value() const {
  return *value_;
}
inline const ::proto::Value& GetResponse::value() const {
  const ::proto::Value* p = value_;
  // @@protoc_insertion_point(field_get:proto.GetResponse.value)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Value*>(
      &::proto::_Value_default_instance_);
}
inline ::proto::Value* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:proto.GetResponse.value)
  
  ::proto::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::proto::Value* GetResponse::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetResponse.value)
  return value_;
}
inline void GetResponse::set_allocated_value(::proto::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:proto.GetResponse.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_message_2eproto
